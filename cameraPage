import React from 'react';
import {
  Alert,
  PermissionsAndroid,
  ActivityIndicator,
  Image,
  PixelRatio,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
  KeyboardAvoidingView,
  ImageBackground,
} from 'react-native';
import ImagePicker from 'react-native-image-picker';
import Button from 'react-native-button';
import {
  Card,
  CardImage,
  CardTitle,
  CardContent,
  CardAction,
} from 'react-native-card-view';
import RNAndroidLocationEnabler from 'react-native-android-location-enabler';
import { Marker } from 'react-native-maps';
import MapView, {PROVIDER_GOOGLE, PROVIDER_DEFAULT} from 'react-native-maps';
import Geolocation from '@react-native-community/geolocation';
import geolib from 'geolib';
import {createAppContainer} from 'react-navigation';
import {createStackNavigator} from 'react-navigation-stack';
import CommentBoxInput from './CommentBoxInput';
import Listpage from '../src/Listpage';
import Header from '../src/header';
import Utils from './Utils';



export async function request_camera_runtime_permission() {

  try {
    const granted = await PermissionsAndroid.request(
      PermissionsAndroid.PERMISSIONS.CAMERA,
      {
        'title': 'XENIA Camera Permission',
        'message': 'XENIA App needs access to your Camera '
      }
    )
    if (granted === PermissionsAndroid.RESULTS.GRANTED) {

    }
    else {
      Alert.alert("Camera Permission Not Granted");
    }
  } catch (err) {
    console.warn(err)
  }
}


export default class App extends React.Component {
  static navigationOptions = {
     header: null,
  };


  constructor(props) {
    super(props)
    this.state = {
      file:'',
      comment:'',
      isMapReady: false,
      latitude: '',
      longitude: '',
      latitudeDelta: '',
      longitudeDelta: '',
      receivedCurrentLocation:true,

    };
    this.selectPhotoTapped = this.selectPhotoTapped.bind(this);

  }

  selectPhotoTapped() {
    const options = {
      quality: 1.0,
      maxWidth: 500,
      maxHeight: 500,
      storageOptions: {
       skipBackup: true,
      },
    };
    ImagePicker.showImagePicker(options, response => {
      console.log('Response = ', response);

      if (response.didCancel) {
        console.log('User cancelled photo picker');
      } else if (response.error) {
        console.log('ImagePicker Error: ', response.error);
      } else if (response.customButton) {
        console.log('User tapped custom button: ', response.customButton);
      } else {
        let source = {uri:response.uri,type:response.type,name:response.fileName};
        // You can also display the image using data:
        // let source = { uri: 'data:image/jpeg;base64,' + response.data };
        this.setState({
          file: source,
        });
      }
    });
  }

  componentDidMount() {
    console.log('componentDidMount');
      this._isMounted = true;
      const context = this;
      context.askPermissions(context);

    }
  askPermissions(context) {
      //Checking for the permission just after component loaded
      async function requestLocationPermission() {
          console.log('requestLocationPermission');
          try {
              const granted = await PermissionsAndroid.request(
                  PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION)
              if (granted === PermissionsAndroid.RESULTS.GRANTED) {
                  console.log('granted');
                  console.log('show location dialog if gps is off');
                  //To Check, If Permission is granted
                  RNAndroidLocationEnabler.promptForEnableLocationIfNeeded({ interval: 10000, fastInterval: 5000 })
                      .then(data => {
                          console.log('enabled or already enabled gps');
                          // The user has accepted to enable the location services
                          // data can be :
                          //  - "already-enabled" if the location services has been already enabled
                          //  - "enabled" if user has clicked on OK button in the popup
                        Geolocation.getCurrentPosition(
                              (position) => {
                                  console.log("current position");
                                  console.log(position);

                                  if (context._isMounted) {
                                      context.setState({
                                              latitude: position.coords.latitude,
                                              longitude: position.coords.longitude
                                      })
                                  }
                              },
                              (error) => console.log(error),
                              { enableHighAccuracy: true, timeout: 200000, maximumAge: 2000000 },
                          );
                      }).catch(err => {
                          // The user has not accepted to enable the location services or something went wrong during the process
                          // "err" : { "code" : "ERR00|ERR01|ERR02", "message" : "message"}
                          // codes :
                          //  - ERR00 : The user has clicked on Cancel button in the popup
                          //  - ERR01 : If the Settings change are unavailable
                          //  - ERR02 : If the popup has failed to open
                          console.log(err)
                          if (err && err.code === 'ERR00') {
                              BackHandler.exitApp()
                          }
                      });
              } else {
                  console.log('permission denied');
                  BackHandler.exitApp()
              }
          } catch (err) {
              console.log('error in runtime permission block');
              console.warn(err)
          }
      }
      if (Utils.isAndroid()) {
          //Calling the permission function
          requestLocationPermission();
      }
  }

   submit = () =>{
     const {file,comment,longitude,latitude} = this.state;
     console.log("I am going to call login api")

var abc = JSON.parse(this.props.navigation.state.params.abc);
var data = new FormData();
data.append("latitude", this.state.latitude);
console.log(this.state.latitude);
data.append("longitude", this.state.longitude);
data.append("comment", this.state.comment);
data.append("file", this.state.file);
var xhr = new XMLHttpRequest();
xhr.withCredentials = true;
xhr.addEventListener("readystatechange", function () {
  console.log(xhr.status)
  console.log(xhr.readyState)
  if (xhr.readyState !== 4) {
              return;
  }
  if (xhr.status === 200) {
    console.log("Successfully200")
  }else{
    console.log("inside error")
  }
  console.log(this.responseText);
  alert(this.responseText);

});
xhr.open("POST", "http://erpportaltest.xeamventures.com/api/v1/attendance-location");
xhr.setRequestHeader("Accept", "application/json");
xhr.setRequestHeader("Content-Type", "multipart/form-data");
xhr.setRequestHeader("Authorization", "Bearer " + abc.success.secret_token,);
xhr.send(data);
   }

  render() {

    const {navigate} = this.props.navigation;
    const card = {card: {width: 500, height: 350}};

    return (
      <KeyboardAvoidingView behavior="position" style={styles.container}>
      <Card styles={card}>
      <Header/>
        <TouchableOpacity onPress={this.selectPhotoTapped.bind(this)}>
          <View
            style={[styles.avatar, styles.avatarContainer, {marginTop: 0}]}>
            {this.state.file === null ? (
              <Text style={{fontSize:10, textColor:'blue'}}>Select a Photo</Text>
            ) : (
              <Image style={styles.avatar} source={this.state.file} />
            )}
            </View>
          </TouchableOpacity>
          <View style={styles.MainContainer}>
            <MapView
              style={styles.mapStyle}
              provider={PROVIDER_GOOGLE}
              showsUserLocation={true}
              zoomUserLocation={true}
              zoomEnabled={true}
              zoomControlEnabled={true}
              mapType='standard'
              
            >
            {this.state.isMapReady &&
                     <MapView.Marker
                         title={this.props.title}
                         coordinate={{
                             latitude: position.coords.latitude,
                             longitude: position.coords.longitude
                         }} />
                 }

            </MapView>
          </View>
          <CommentBoxInput
            placeholder="COMMENT BOX"
            autoCapitalize={'done'}
            returnKeyType={'done'}
            onChangeText={comment => this.setState({ comment })}
            autoCorrect={true}/>
            <CardAction >
           <Button
             style={styles.button}
             onPress={() => this.submit()}>
             SUBMIT
           </Button>
           </CardAction >
            </Card>
    </KeyboardAvoidingView>

    );
  }
}

const styles = StyleSheet.create({
  button: {
     marginBottom:10,
    color: '#DCE4EF',
    paddingTop:10,
    paddingBottom:10,
    paddingLeft:50,
    paddingRight:50,
    backgroundColor:'rgb(19,111,232)',
    borderRadius:10,
    borderWidth: 1,
    borderColor: 'rgb(0,0,0)'
  },
  container: {
    flex: 1,
    flexDirection: 'column',
    alignItems: 'center',

  },
  avatarContainer: {
    borderColor: '#9B9B9B',
    borderWidth: 5 / PixelRatio.get(),
    justifyContent: 'center',
    alignItems: 'center',
  },
  avatar: {
    borderRadius: 10,
    borderTopWidth: 2,
    borderBottomWidth:2,
    borderRightWidth:2,
    borderLeftWidth:2,
    width:400,
    height: 150,
  },
  MainContainer: {
    flex:2,
    flexDirection:'row',
    alignItems:'center',
    borderRadius: 8,
    borderTopWidth: 1,
    borderBottomWidth:1,
    borderRightWidth:1,
    borderLeftWidth:1,
    height: '50%',
    width: '80%',
  },
  mapStyle: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
});
